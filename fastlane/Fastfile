
###############################
### tf_upload_apk_to_hockey ###
###############################

private_lane :tf_upload_apk_to_hockey do |options|

    apkFile = options[:apkFile]
    hockeyAppId = options[:hockeyAppId]

    found = false
    for apk_path in lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
        found = apk_path.include? apkFile
        if found
            break
        end
    end

    UI.crash!("Cannot find the APK " + apkFile) if !found

    UI.important("Uploading to HockeyApp (id: \"#{hockeyAppId}\") apk: #{apk_path}")

    hockey(
        api_token: ENV["HOCKEYAPP_API_TOKEN"], # configured in jenkins
        apk: apk_path,
        public_identifier: hockeyAppId,
        notify: "0",
        notes: ENV["CHANGELOG"]
    )

end

#################################
### tf_increment_build_number ###
#################################

desc "Increment Build Version Code"
private_lane :tf_increment_build_number do |options|

    buildVariant = options[:buildVariant]
    branch = options[:branch]

    modulePropertiesFile = options[:modulePropertiesFile]
    if !modulePropertiesFile
        modulePropertiesFile = "./app/module.properties"
    end

    UI.important("Increment Build Version Code")

    next_version_code  = ENV["app_version_code"].to_i + 1
    ENV["next_version_code"] = next_version_code.to_s

    # set new version code
    sh("awk -F\"=\" \'BEGIN{OFS=\"=\";} /app_version_code/{$2=\"#{next_version_code}\";print;next}1\' .#{modulePropertiesFile} > .#{modulePropertiesFile}_new")
    sh("rm .#{modulePropertiesFile}")
    sh("mv .#{modulePropertiesFile}_new .#{modulePropertiesFile}")

    tf_collect_changelog(buildVariant: buildVariant)

    # git push version code

    git_add(path: modulePropertiesFile)
    git_commit(path: modulePropertiesFile, message: "Increment build number to #{ENV["next_version_code"]}")

    if git_tag_exists(tag: "v"+buildVariant+ENV["next_version_code"])
        UI.message("Git tag already existed")
    else
        add_git_tag(tag: 'v'+buildVariant+ENV["next_version_code"])
    end

    push_to_git_remote(
        remote: 'origin',
        local_branch: "HEAD",
        remote_branch: branch,
        force: false,
        tags: true
    )

end

############################
### tf_collect_changelog ###
############################

desc "Collect git commit messages and author mail adresses into a changelog and store them as environmental varibles."
private_lane :tf_collect_changelog do |options|

    buildVariant = options[:buildVariant]

    ENV["CHANGELOG"] =  changelog_from_git_commits(tag_match_pattern: "*v#{buildVariant}*",include_merges: false, pretty: '- (%an) %s')
    ENV["EMAIL"] =  changelog_from_git_commits(tag_match_pattern: "*v#{buildVariant}*",include_merges: false, pretty: '%ae')

end

##################
#### tf_clean ####
##################

desc "Build the project based on the build type and flavor of the environment."
private_lane :tf_clean do |options|
    gradle(task: "clean")
end

######################
#### tf_build_apk ####
######################

desc "Build the project based on the build type and flavor of the environment."
private_lane :tf_build_apk do |options|

    buildVariant = options[:buildVariant]
    signApk = options[:signApk]

    if !buildVariant
        UI.important("Building all variants")
        buildVariant = ""
    else
        UI.important("Building variant " + buildVariant)
    end

    addition = ""
    if signApk
        KEYSTORE_FILE = ENV["KEYSTORE_FILE"]
        KEYSTORE_PASSWORD = ENV["KEYSTORE_PASSWORD"]
        KEYSTORE_KEY_ALIAS = ENV["KEYSTORE_KEY_ALIAS"]
        KEYSTORE_KEY_PASSWORD = ENV["KEYSTORE_KEY_PASSWORD"]
        addition = " -Pandroid.injected.signing.store.file='#{KEYSTORE_FILE}'"
        addition << " -Pandroid.injected.signing.store.password='#{KEYSTORE_PASSWORD}'"
        addition << " -Pandroid.injected.signing.key.alias='#{KEYSTORE_KEY_ALIAS}'"
        addition << " -Pandroid.injected.signing.key.password='#{KEYSTORE_KEY_PASSWORD}'"
    end

    gradle(task: "assemble" + buildVariant + addition)

end

##############################
#### tf_release_playstore ####
##############################

desc "release the app on PlayStore"
private_lane :tf_release_playstore do |options|

    appId = options[:appId]
    apkFile = options[:apkFile]
    track = options[:track]
    jsonKey = options[:jsonKey]
    if !jsonKey
        jsonKey = ENV["json_key"]
    end

    found = false
    for apk_path in lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
        found = apk_path.include? apkFile
        if found
            break
        end
    end

    UI.crash!("Cannot find the APK " + apkFile) if !found

    supply(
        package_name: appId,
        track: track,
        apk: apk_path,
        json_key: jsonKey,
        skip_upload_metadata: true,
        skip_upload_images: true,
        skip_upload_screenshots: true
    )

end